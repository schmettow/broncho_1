---
title: "BNS"
format: docx
---

```{r}
#| echo: true

library(tidyverse)
library(readxl)
library(brms)
options(mc.cores = 6)
library(bayr)
```

A series of models with the goal to understand the effect of proficiency on the movement of the arm.

M_1 is the original model. However, this contains conditional effects with high number of levels.
This is hard to interpret. Models are presented as a stream of thought. M_5 is the final model for now.

+ a Gamma(log) model is used to have multiplicative effects. This vastly reduces the number of conditional efects needed
+ Tasks and Positions are collected in a flat factor, which is used as a random effect. After all, the individual positions and tasks don't matter so much and can be expressed in terms of sources of variance (group level sd)
+ What remains is a unifactorial model, which is easy to interpret.

Interpretation of results:
+ the IM > Expert > Novice effect is present in all three motion variables

A note on M_6: Here we introduce a random effect for participant. Formally, this is correct and should reduce uncertainty on teh fixed effects, or at least not worsen it. In contrast, all effects become highly uncertain as compared to M_5. One explanation is that teh model is too complex, i.e. no individual differences exist  beyond group membership.















```{r}
D_1 <- read_excel("FinalDf.xlsx") |> 
  mutate(Participant = as.factor(Participant))

D_2 <- D_1 |> 
  group_by(Participant, Trial, Position, Measure, Task, Time, Sign) %>%
  mutate(XYZ = mean(value)) %>%
  mutate(SumXYZ = mean(XYZ)) %>%
  filter(ToT > 9)

D_3 <- D_2 %>% 
  filter(Time == 1) %>%   ## SumValue without aggregation
  select(-value, -Time, -SumMovement, -Movement, -XYZ, -SumXYZ) %>%
  pivot_wider(names_from = Measure, values_from = SumValue) %>%
  mutate(Velocity = if_else(is.na(Velocity) & Participant == 12, 0.02488166, Velocity)) %>%
  mutate(Velocity = if_else(is.na(Velocity) & Participant == 17, 0.00502671, Velocity)) %>%
  mutate(ConWall = as.numeric(ConWall))


```

```{r}
#| eval: false
bf_Acc <- bf(Acceleration ~ Proficiency * (PosAxis + Task)) + exgaussian() 
bf_Vel <- bf(Velocity ~ Proficiency * (PosAxis + Task)) + exgaussian() 
bf_Jerk <- bf(Jerk ~ Proficiency * (PosAxis + Task)) + exgaussian() 

D_4 <- D_3 %>% 
  unite(PosAxis, c(Position, Axis), remove = FALSE) %>% 
  mutate(PosAxis = factor(PosAxis, levels = c("Hand_X", "Hand_Y", "Hand_Z" , "FoArm_X", "FoArm_Y", "FoArm_Z", "UpArm_X", "UpArm_Y", "UpArm_Z"))) %>%
  mutate(Task = as.factor(Task),
        Velocity = Velocity * 100,
        Acceleration = (Acceleration * 100)^(1/2),      
        Jerk = (Jerk * 100)^(1/3))

M_1 <-  brm(bf_Acc + bf_Vel + bf_Jerk + set_rescor(FALSE), 
            data = D_4, chains = 6, cores = 6, iter = 4000, warmup = 2000, 
            init = 0, family = exgaussian)

save(M_1, D_4, file = "M_1.Rda")
```


```{r}
load("M_1.Rda")

P_1 <- posterior(M_1)

```

```{r}
#| eval: false
D_5 <- D_4 |> 
  mutate(Measurement = str_c(PosAxis, sep = ":"))

M_2 <- brm(bf(Velocity ~ Proficiency + (1|Measurement)) +
           bf(Acceleration ~ Proficiency * Task + (1|Measurement)) +
           bf(Jerk ~ Proficiency * Task + (1|Measurement)),
            data = D_5, chains = 6, cores = 6, iter = 4000, warmup = 2000, 
            init = 0, family = exgaussian)

save(M_2, D_5, file = "M_2.Rda")
```


```{r}
load("M_2.Rda")
summary(M_2)
```




```{r}
#| eval: false
D_6 <- D_4 |> 
  mutate(Measurement = str_c(PosAxis, Task, sep = ":"))

M_3 <- brm(bf(Velocity ~ Proficiency + (1 + |Measurement)) +
           bf(Acceleration ~ Proficiency + (1|Measurement)) +
           bf(Jerk ~ Proficiency + (1|Measurement)),
            data = D_6, chains = 6, cores = 6, iter = 4000, warmup = 2000, 
            init = 0, family = exgaussian)    

save(M_3, D_6, file = "M_3.Rda")
```


```{r}
load("M_3.Rda")
summary(M_3)
```
```{r}
#| eval: false
M_4 <- brm(bf(Velocity ~ Proficiency + (1 + Proficiency|Measurement)) +
           bf(Acceleration ~ Proficiency + (1 + Proficiency|Measurement)) +
           bf(Jerk ~ Proficiency + (1 + Proficiency|Measurement)),
            data = D_6, chains = 6, cores = 6, iter = 4000, warmup = 2000, 
            init = 0, family = exgaussian)    
save(M_4, D_6, file = "M_4.Rda")
```

```{r}
load("M_4.Rda")
summary(M_4)
```

```{r}
#| eval: false
M_5 <- brm(bf(Velocity ~ Proficiency + (1 | Measurement)) +
           bf(Acceleration ~ Proficiency + (1 | Measurement)) +
           bf(Jerk ~ Proficiency + (1 | Measurement)),
            data = D_6, chains = 6, cores = 6, iter = 4000, warmup = 2000, 
            init = 0, family = Gamma(link = "log"))

save(M_5, D_6, file = "M_5.Rda")
```

```{r}
load("M_5.Rda")
summary(M_5)
```
```{r}
P_5 <- posterior(M_5)

clu <- function(x, fn = identity) {
  x |> 
    separate(parameter, into = c(NA, "Motion", "Coef"), sep = "_") |> 
    mutate(value = fn(value)) |> 
    group_by(type, Motion, Coef) |>
    summarise(center = median(value), 
              lower = quantile(value, 0.025),
              upper = quantile(value, 0.975)) |> 
    ungroup() |> 
    mutate(Proficiency = if_else(Coef == "Intercept",
                                 "Expert (Reference)",
                                 str_remove(Coef, "Proficiency"))) |> 
    select(Motion, Proficiency, type, center, lower, upper)
}


T_5 <-
  P_5 |> 
  filter(type == "fixef") |> 
  clu(fn = exp)
T_5

```

```{r}
T_5 |> 
  ggplot(aes(x = Motion, y = mean))
```


```{r}
#| eval: false
M_6 <- brm(bf(Velocity ~ Proficiency + (1 | Measurement) + (1|Participant)) +
           bf(Acceleration ~ Proficiency + (1 | Measurement) + (1|Participant)) +
           bf(Jerk ~ Proficiency + (1 | Measurement)+ (1|Participant)),
            data = D_6, chains = 6, cores = 6, iter = 4000, warmup = 2000, 
            init = 0, family = Gamma(link = "log"))
save(M_6, D_6, file = "M_6.Rda")
```

```{r}
summary(M_6)
P_6 <- posterior(M_6)
```

```{r}
P_6 |> 
  filter(type == "fixef") |>
  clu(fn = exp)
```

